#!/usr/bin/env ruby
# encoding: utf-8
# in: media-old.xml media-new.xml
# out: evenements.json
require 'rexml/document'
require 'json'

old_file = File.new(ARGV[0])
new_file = File.new(ARGV[1])
old_doc = REXML::Document.new(old_file.read)
new_doc = REXML::Document.new(new_file.read)

json = {}
json[:date_heure_generation] = new_doc.root.attributes['date_heure_generation']
json[:date_heure_generation_previous] = old_doc.root.attributes['date_heure_generation']
json[:tweets] = []

# 2013
projet_montreal = 13

# 2009
#projet_montreal = 9

hashtags = "#mtl2013 #polmtl"

def fmt(elem, type)
  case type
  when :i
    elem.text.to_i
  when :f
    elem.text.to_f
  when :s
    elem.text
  else
  elem
  end
end

candidats_avant = {}
candidats_maintenant = {}
json[:postes] = []
#json[:mairie_avant] = mairie_avant
#json[:mairie_maintenant] = mairie_maintenant

old_doc.root.each_element('/resultats/resultats_maire/sommaire/candidat | /resultats/resultats_postes/poste/candidat') do |tag|
  candidats_avant[tag.attributes['id'].to_i] = {
    'nb_voix_obtenues' => tag.elements['nb_voix_obtenues'].text.to_i,
    'nb_voix_majorite' => tag.elements['nb_voix_majorite'].text.to_i,
  }
end
new_doc.root.each_element('/resultats/resultats_maire/sommaire/candidat | /resultats/resultats_postes/poste/candidat') do |tag|
  id = tag.attributes['id'].to_i
  candidat = {
    'nom' => :s,
    'prenom' => :s,
    'nb_voix_obtenues' => :i,
    'nb_voix_majorite' => :i
  }.inject({}) { |h, (k, v)| h[k] = fmt(tag.elements[k], v); h }
  candidat[:id] = id
  candidat[:poste_id] = tag.elements['..'].attributes['id']
  candidat[:poste] = tag.elements['../nom'].text if tag.elements['../nom']
  candidat[:parti] = tag.elements['parti'].attributes['id'].to_i
  candidats_maintenant[id] = candidat

  before = candidats_avant[id]['nb_voix_majorite']
  after = candidat['nb_voix_majorite']
  candidat['nb_voix_majorite'] = [before, after]
  candidat['nb_voix_obtenues'] = [candidats_avant[id]['nb_voix_obtenues'], candidat['nb_voix_obtenues']]
  if before > 0 && after == 0
    candidat[:evenement] = :perdant
    json[:postes] << candidat
  elsif before == 0 && after > 0
    candidat[:evenement] = :gagnant
    json[:postes] << candidat
    if candidat[:parti] == projet_montreal
      json[:tweets] << "En avance: #{candidat['prenom']} #{candidat['nom']} avec @projetmontreal #{hashtags}"
    end
  end
end

# Conseil de ville
def sieges_par_parti(doc, types)
  sieges = Hash.new
  types_expr = types.map{|t| "type = '#{t}'"}.join(' or ')
  doc.root.each_element("/resultats/resultats_postes/poste[#{types_expr}]/candidat[nb_voix_majorite != '']") do |tag|
    candidat = {
      :id => tag.attributes["id"].to_i,
      :parti => parti = tag.elements["parti"].attributes["id"].to_i,
      :nom => tag.elements["nom"].text,
      :prenom => tag.elements["prenom"].text,
      :poste_id => poste_id = tag.elements['..'].attributes['id'],
      :poste => tag.elements['../nom'].text,
      :arrondissement => tag.elements["../arrondissement"].attributes["id"].to_i
    }
    s = sieges[parti]
    sieges[parti] = s = {} unless s
    s[poste_id] = candidat
  #puts "#{parti}: #{poste_id} -> #{candidat}"
  end
  sieges
end

sieges_avant = sieges_par_parti(old_doc, ['CV', 'MC'])
sieges_apres = sieges_par_parti(new_doc, ['CV', 'MC'])
nb_par_parti = [sieges_avant, sieges_apres].map {|s|
  s.inject({}) { |h, (parti, sieges)| h[parti] = sieges.count; h }
}
majorite = nb_par_parti.map {|sieges|
  maj = [0,0]
  sieges.each {|parti, sieges|
    maj = [parti, sieges] if sieges > maj[1]
  }
  maj[0]
}
json[:conseil_ville] = {}
json[:conseil_ville][:partis] = nb_par_parti
if majorite[0] != majorite[1]
  json[:conseil_ville][:majoritaire] = majorite[1]
  #json[:conseil_ville][:avant] = sieges_avant
  #json[:conseil_ville][:apres] = sieges_apres
  if majorite[1] == projet_montreal
    json[:tweets] << "@projetmontreal majoritaire au conseil de ville avec #{nb_par_parti} sièges #{hashtags}"
  end
end

# Conseil d'arrondissement
def sieges_par_arrondissement_par_parti(doc)
  sieges = Hash.new
  types_expr = ['CV', 'MC', 'CA'].map{|t| "type = '#{t}'"}.join(' or ')
  doc.root.each_element("/resultats/resultats_postes/poste[#{types_expr}]/candidat[nb_voix_majorite != '']") do |tag|
    candidat = {
      :id => tag.attributes["id"].to_i,
      :parti => parti = tag.elements["parti"].attributes["id"].to_i,
      :nom => tag.elements["nom"].text,
      :prenom => tag.elements["prenom"].text,
      :poste_id => poste_id = tag.elements['..'].attributes['id'],
      :poste => tag.elements['../nom'].text,
      :arrondissement => arrondissement = tag.elements["../arrondissement"].attributes["id"].to_i,
      :nom_arrondissement => arrondissement = tag.elements["../arrondissement"].text
    }
    a = sieges[arrondissement]
    a = sieges[arrondissement] = {} unless a
    p = a[parti]
    p = a[parti] = {} unless p
    p[poste_id] = candidat 
    #puts "#{arrondissement} => #{parti} => #{poste_id} -> #{candidat}"
  end
  sieges
end

json[:conseil_arrondissement] = {}
arr_avant = sieges_par_arrondissement_par_parti(old_doc)
arr_apres = sieges_par_arrondissement_par_parti(new_doc)
arr_avant.each do |arrondissement, ignored|
  sieges_avant = arr_avant[arrondissement]
  sieges_apres = arr_apres[arrondissement]
  nb_par_parti = [sieges_avant, sieges_apres].map do |s|
    s.inject({}) { |h, (parti, sieges)| h[parti] = sieges.count; h }
  end
  majorite = nb_par_parti.map do |sieges|
    maj = [0,0]
    sieges.each do |parti, sieges|
      maj = [parti, sieges] if sieges > maj[1]
    end
    maj[0]
  end
  if majorite[0] != majorite[1]
    json[:conseil_arrondissement][arrondissement] = {}
    json[:conseil_arrondissement][arrondissement][:majoritaire] = majorite[1]
    json[:conseil_arrondissement][arrondissement][:avant] = sieges_avant
    json[:conseil_arrondissement][arrondissement][:apres] = sieges_apres
    if majorite[1] == projet_montreal
      nom_arr = sieges_apres[majorite[1]].values[0][:nom_arrondissement]
      json[:tweets] << "@projetmontreal majoritaire dans #{nom_arr} avec #{sieges_apres.count} sièges #{hashtags}"
    end
  end
end

puts JSON.pretty_generate(json)
